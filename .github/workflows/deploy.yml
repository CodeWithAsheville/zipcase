name: Deploy

on:
  push:
    branches: [main, live]

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment_name: ${{ steps.set-env.outputs.environment_name }}
      aws_profile: ${{ steps.set-env.outputs.aws_profile }}
    steps:
      - id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment_name=dev" >> $GITHUB_OUTPUT
            echo "aws_profile=zipcase-dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/live" ]]; then
            echo "environment_name=prod" >> $GITHUB_OUTPUT
            echo "aws_profile=zipcase-prod" >> $GITHUB_OUTPUT
          fi
  
  verify-ssm-parameters:
    name: Verify SSM Parameters
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment_name }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Check required SSM parameters
        run: |
          REQUIRED_PARAMS=(
            "/zipcase/portal_url"
            "/zipcase/portal_case_url"
            "/zipcase/cognito/user_pool_id"
            "/zipcase/cognito/app_client_id"
            "/zipcase/admin/user_id"
          )
          
          MISSING_PARAMS=0
          
          for param in "${REQUIRED_PARAMS[@]}"; do
            echo "Checking SSM parameter: $param"
            if ! aws ssm get-parameter --name "$param" --with-decryption 2>/dev/null; then
              echo "::error::Missing required SSM parameter: $param"
              MISSING_PARAMS=1
            fi
          done
          
          if [ $MISSING_PARAMS -ne 0 ]; then
            echo "::error::One or more required SSM parameters are missing"
            exit 1
          fi
          
          echo "All required SSM parameters are present"

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [determine-environment, verify-ssm-parameters]
    environment: ${{ needs.determine-environment.outputs.environment_name }}
    defaults:
      run:
        working-directory: ./infra/terraform
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Terraform Init
        working-directory: ./infra/terraform/${{ needs.determine-environment.outputs.environment_name }}
        run: terraform init
        
      - name: Terraform Apply
        working-directory: ./infra/terraform/${{ needs.determine-environment.outputs.environment_name }}
        run: |
          # Set variable to disable profile usage in CI/CD
          export TF_VAR_use_profile=false

          terraform apply -auto-approve

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-apply]
    environment: ${{ needs.determine-environment.outputs.environment_name }}
    defaults:
      run:
        working-directory: ./serverless
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './serverless/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Install serverless framework
        run: npm install -g serverless

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Configure AWS profile
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ${{ needs.determine-environment.outputs.aws_profile }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile ${{ needs.determine-environment.outputs.aws_profile }}
          aws configure set region us-east-2 --profile ${{ needs.determine-environment.outputs.aws_profile }}
          
      - name: Deploy with serverless compose
        run: serverless deploy --stage ${{ needs.determine-environment.outputs.environment_name }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-backend]
    environment: ${{ needs.determine-environment.outputs.environment_name }}
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Retrieve environment values from SSM
        run: |
          aws ssm get-parameter --name "/zipcase/portal_url" --with-decryption --query "Parameter.Value" --output text > .env.production
          echo "VITE_API_URL=https://app${{ needs.determine-environment.outputs.environment_name == 'prod' && '' || '-dev' }}.zipcase.org" >> .env.production
          echo "VITE_PORTAL_URL=$(cat .env.production)" >> .env.production
          aws ssm get-parameter --name "/zipcase/cognito/user_pool_id" --with-decryption --query "Parameter.Value" --output text >> .env.production
          echo "VITE_COGNITO_USER_POOL_ID=$(tail -n 1 .env.production)" >> .env.production
          sed -i '$ d' .env.production # remove the last line since we captured it
          aws ssm get-parameter --name "/zipcase/cognito/app_client_id" --with-decryption --query "Parameter.Value" --output text >> .env.production
          echo "VITE_COGNITO_CLIENT_ID=$(tail -n 1 .env.production)" >> .env.production
          sed -i '$ d' .env.production # remove the last line since we captured it
          aws ssm get-parameter --name "/zipcase/portal_case_url" --with-decryption --query "Parameter.Value" --output text >> .env.production || echo "/app/RegisterOfActions" >> .env.production
          echo "VITE_PORTAL_CASE_URL=$(tail -n 1 .env.production)" >> .env.production
          sed -i '$ d' .env.production # remove the last line since we captured it
          
      - name: Build frontend
        run: npm run build
          
      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://zipcase-frontend-${{ needs.determine-environment.outputs.environment_name }} --delete
          
      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation list-exports --query "Exports[?Name=='zipcase-frontend-${{ needs.determine-environment.outputs.environment_name }}-distribution-id'].Value" --output text)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/live'
    needs: [deploy-frontend]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: get-version
        run: |
          CURRENT_DATE=$(date +'%Y.%m.%d')
          RELEASE_COUNT=$(git tag -l "v$CURRENT_DATE.*" | wc -l)
          RELEASE_VERSION="v$CURRENT_DATE.$((RELEASE_COUNT + 1))"
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get-version.outputs.version }}
          name: Release ${{ steps.get-version.outputs.version }}
          generateReleaseNotes: true